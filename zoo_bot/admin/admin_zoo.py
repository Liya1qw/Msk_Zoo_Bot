from utils import dp
from aiogram import types
from zoo_bot.admin.admin_change import AdminChange
from aiogram.dispatcher import FSMContext
from db_utils import get_reviews

class Administrator:
    @staticmethod
    async def administrator_zoo(message: types.Message, state: FSMContext):
        text = '–í–≤–µ–¥–∏ –∫–ª—é—á –∫ –¥–æ—Å—Ç—É–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        await message.answer(text)
        await state.set_state("awaiting_admin_key")


@dp.message_handler(state="awaiting_admin_key", content_types=['text'])
async def key_admin(message: types.Message, state: FSMContext):
    key = '9yuhs14_oplf53w0/po1'
    if message.text.strip() == key:
        text = '–ü—Ä–∏–≤–µ—Ç! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∫–≤–∏–∑–∞, –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∞ —Ç–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã.'
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_ques = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data='change_ques')
        btn_answ = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç', callback_data='change_answ')
        btn_stor = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã', callback_data='get_reviews')
        btn_exit = types.InlineKeyboardButton('–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∞', callback_data='exit_admin')
        markup.add(btn_ques, btn_answ, btn_stor, btn_exit)
        await message.answer(text, reply_markup=markup)
        await state.set_state("admin_mode")
    else:
        await message.answer('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.')
        await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'exit_admin', state="admin_mode")
async def exit_admin_mode(call: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    try:
        markup = types.InlineKeyboardMarkup()
        btn_back = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –≤ –Ω–∞—á–∞–ª–æ', callback_data='start')
        markup.add(btn_back)
        await call.message.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', reply_markup=markup)
        await state.finish()
    except KeyError:
        pass

@dp.callback_query_handler(lambda call: call.data == 'change_ques', state="admin_mode")
async def change_que(call: types.CallbackQuery, state: FSMContext):
    await AdminChange.change_que_admin(call.message, state)

@dp.callback_query_handler(lambda call: call.data == 'change_answ', state="admin_mode")
async def change_ans(call: types.CallbackQuery, state: FSMContext):
    await AdminChange.change_answ_admin(call.message, state)

@dp.callback_query_handler(lambda call: call.data == 'get_reviews', state="admin_mode")
async def show_reviews(call: types.CallbackQuery):
        reviews = await get_reviews()
        if not reviews:
            await call.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤.")
        else:
            review_texts = [
                f"üë§ <b>{username}</b>\nüìù {review}\n‚è∞ {timestamp}"
                for username, review, timestamp in reviews
            ]
            await call.message.answer("\n\n".join(review_texts), parse_mode="HTML")
        for username, review_text, timestamp in reviews:
            print(f"üë§ {username}, üìù {review_text}, ‚è∞ {timestamp}")