from aiogram import executor, types
from utils import dp
from zoo_bot.quiz.quiz_bot import Quiz
from cont_zoo import ContZoo
from zoo_bot.admin.admin_zoo import Administrator
from aiogram.dispatcher import FSMContext
from zoo_bot.review.db_utils import create_table
from zoo_bot.review.review_user import ReviewUser

async def on_startup(dispatcher):
    await create_table()

async def send_welcome_message(message: types.Message, first_name: str):
    text = (f'–ü—Ä–∏–≤–µ—Ç {first_name}! ‚ò∫Ô∏è\n'
        '–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–∏–º–æ—à–∞ –∏ —è –∂–∏–≤—É –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –∑–æ–æ–ø–∞—Ä–∫–µ :)\n\n'
        '–ù–µ–¥–∞–≤–Ω–æ —è –ø—Ä–æ—à–µ–ª –≤–∏–∫—Ç–æ—Ä–∏–Ω—É "–ö—Ç–æ —Ç–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?" –∏ —É–∑–Ω–∞–ª, —á—Ç–æ –º–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - –º–∞–Ω—É–ª! üò±\n'
        '–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ —Ç–æ–∂–µ –ø—Ä–æ–π—Ç–∏ —Ç–∞–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫—Ç–æ —Ç–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ?\n\n'
        '–ê –≤ –∫–æ–Ω—Ü–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è —Ç–µ–±—è –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ üòã\n\n'
        '–° –ª—é–±–æ–≤—å—é,\n'
        '–¢–∏–º–æ—à–∞')
    with open('photo/manul_photo.jpg', 'rb') as file:
        markup = types.InlineKeyboardMarkup(row_width=1)
        btn_quiz = types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É üòç', callback_data='quiz')
        btn_contact = types.InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏', callback_data='contacts')
        btn_help = types.InlineKeyboardButton('–ü–æ–º–æ—â—å', callback_data='help')
        markup.add(btn_quiz, btn_contact, btn_help)
        await message.answer_photo(file, text, reply_markup=markup)

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    name_user = message.from_user.first_name
    await send_welcome_message(message, name_user)

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await ContZoo.help_zoo(message)

@dp.message_handler(commands=['review'])
async def admin(message: types.Message, state: FSMContext):
    print("–ö–Ω–æ–ø–∫–∞ '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤' –Ω–∞–∂–∞—Ç–∞")
    await ReviewUser.review_user(message, state)

@dp.message_handler(commands=['admin'])
async def admin(message: types.Message, state: FSMContext):
    await Administrator.administrator_zoo(message, state)

@dp.callback_query_handler(lambda call: call.data == 'quiz')
async def callback_quiz(call: types.CallbackQuery, state: FSMContext):
    print("–ö–Ω–æ–ø–∫–∞ '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É' –Ω–∞–∂–∞—Ç–∞")
    await Quiz.start_quiz(call.message, state)

@dp.callback_query_handler(lambda call: call.data == 'contacts')
async def callback_contact(call: types.CallbackQuery):
    print("–ö–Ω–æ–ø–∫–∞ '–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏' –Ω–∞–∂–∞—Ç–∞")
    await ContZoo.more_contact(call.message)

@dp.callback_query_handler(lambda call: call.data == 'help')
async def callback_help(call: types.CallbackQuery):
    print("–ö–Ω–æ–ø–∫–∞ '–ü–æ–º–æ—â—å' –Ω–∞–∂–∞—Ç–∞")
    await ContZoo.help_zoo(call.message)

@dp.callback_query_handler(lambda call: call.data == 'start')
async def callback_start(call: types.CallbackQuery):
    print("–ö–Ω–æ–ø–∫–∞ '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ' –Ω–∞–∂–∞—Ç–∞")
    await send_welcome_message(call.message, f'{call.from_user.first_name}')

@dp.callback_query_handler(lambda call: call.data == 'review')
async def callback_review(call: types.CallbackQuery, state: FSMContext):
    print("–ö–Ω–æ–ø–∫–∞ '–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤' –Ω–∞–∂–∞—Ç–∞")
    await ReviewUser.review_user(call.message, state=state)

@dp.errors_handler()
async def handle_errors(update, exception):
    print(f"–û—à–∏–±–∫–∞: {exception}")
    return True


executor.start_polling(dp, on_startup=on_startup)